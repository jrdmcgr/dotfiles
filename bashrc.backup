d1() {
    du -hd1 "$1"
}

# Python Aliases
#alias python='python3'
#alias pip='pip3'
alias i='ipython'
alias t='nosetests'
alias vv='virtualenv .venv'
alias vva='source .venv/bin/activate'
alias ppi='pip3 install -U'
alias ppu='pip3 uninstall'
alias ppf='pip3 freeze -l > requirements.txt'
alias ppr='pip3 install -r requirements.txt'

# PHP Aliases
alias phpi='psysh'
alias phps='php -S 0:9000'
alias art='php artisan'
alias ci='composer install'
alias cu='composer update'

# Vagrant Aliases
alias v='vagrant'
alias vup='vagrant up'
alias vdn='vagrant halt'
alias vss='vagrant ssh'
alias vst='vagrant status'
alias vcf='vagrant ssh-config'
alias vdf='vagrant destroy -f'
alias vre='vagrant reload'
alias vpr='vagrant provision'

# Docker Compose Aliases
alias d-c='docker-compose'
alias dcdv='docker-compose -f docker-compose.yml -f docker-compose.db.yml up --detach --remove-orphans'
alias dcup='docker-compose up'
alias dcud='docker-compose up --detach'
alias dcub='docker-compose up --build --detach'
alias dcex='docker-compose exec'
alias dcdn='docker-compose down'
alias dex='docker exec -it'


# Node Aliases
alias ni='npm install'
alias nid='npm install --save-dev'
alias nis='npm install --save'


# Mac Specific Aliases
alias ip="ipconfig getifaddr en0"
alias vbox='VBoxManage'
alias cask="brew cask"
# Show/hide hidden files in Finder
alias show="defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder"
alias hide="defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder"
# Hide/show all desktop icons (useful when presenting)
alias hidedesktop="defaults write com.apple.finder CreateDesktop -bool false && killall Finder"
alias showdesktop="defaults write com.apple.finder CreateDesktop -bool true && killall Finder"


# Config file shortcuts
alias gitconfig='vim ~/.gitconfig'
alias hosts='sudo vim /etc/hosts'
alias bashrc='vim ~/.bashrc; source ~/.bashrc'
alias private='vim ~/Dropbox/Code/Config/dotfiles/private.sh'
alias sshconfig='vim ~/.ssh/config'
alias vimrc='vim ~/.vimrc'
alias diga='dig +noall +answer'

# Ansible shortcuts
function ansible-provision {
    local env="$1"
    shift
    local args="$@"
    # TODO: if tags, then apply tags
    ansible-playbook -i "$env" main.yml $args
}
alias apr="ansible-provision"
alias ap="ansible-playbook"


# Misc functions
function _note {
    local domain="$1"
    local name="$2"
    cd "$HOME/Dropbox/Notes/${domain}/Drafts"
    if [ -z $name ]; then
        subl "$(d).md"
    else
        subl "$(d) ${name}.md"
    fi
}
alias note="_note Home"
alias worknote="_note Informulate"

function blog {
    local title="${1:-Untitled}"
    local meta="---
Title: $title
Author: Jared McGuire
Date: $(d)
Template: single
---";
    local file="$HOME/Dropbox/Notes/Home/Published/articles/$(d) $title.md"
    echo "$meta" > "$file"
    subl "$file"
}


trash() {
    mv "$1" ~/.Trash
}

flushdns() {
    sudo dscacheutil -flushcache;
    sudo killall -HUP mDNSResponder
}

# Source all .sh files in the given directory.
sourcedir() {
	if [ -d $1 ]; then
		for file in ${1}/*.sh; do
			source $file
		done
	fi
}

ql() {
	qlmanage -p "$@" >& /dev/null &
}

# Sum a list of numbers from stdin
sum() {
	local total=0
	while read value; do
		total=$(($total + $value))
	done
}

# Set the tab title in iTerm 2
tt() {
  echo -ne "\033];${1}\007";
}

# Make a directory and cd into it.
mcd() {
  mkdir -p "$1" && cd "$1";
}

# Scope out the contents of a file.
inspect() {
    (head -5; tail -5) < $1
}

findall() {
    sudo find / -iname "\*$1\*"
}

findlike() {
    echo "*$1*"
    find . -iname "*$1*"
}

# Edit a remote file with Sublime Text.
sublr() {
	local filename="$1"
	scp $1 ./ &&
	subl -w ./$filename &&
	scp ./$filename $1
}

hr() {
    local column_count=$(tput cols)
    for _ in $(seq $column_count); do
        echo -n "-"
    done
}

forward_port() {
    local from_port="$1"
    local to_port="$2"
    echo "rdr pass inet proto tcp from any to any port ${to_port} -> 127.0.0.1 port ${from_port}" | sudo pfctl -ef -
}

reset_port_forwarding() {
    sudo pfctl -f /etc/pf.conf
}

lookup-host() {
    grep -E "\b$1\b" /etc/hosts | cut -d ' ' -f 1
}

# Move a file with a substitution regex.
smv() {
    local src="$1"
    local dest="$2"
    local new=$(echo $src | sed -E "$dest")
    mv "$src" "$new"
}

# link_dotfiles:
#   Symlink all in $source_directory that begin with a dot unless they are included
#   in the ignore array. Use the include array to link files that don't begin
#   with a dot.
# Arguments:
#   1 $source_directory - the directory containing the files to be linked. Defaults
#       to the $HOME/dotfiles.
#   2 $destination - the directory in which to make the links. Defaults to $HOME.
link_dotfiles() {
    local source_directory="${1-$HOME/dotfiles}"
    local destination="${2-$HOME}"
    local ignore_files=(.git .gitignore .DS_Store )
    for file in $source_directory/.*; do
        # skip if the file is in the ignore array
        if (echo ${ignore_files[*]} | grep -q $file); then
            continue
        fi

        # then link the file, but don't overwrite regular files.
        if [ -f $destination/$file ] && ! [ -L $destination/$file ]; then
            echo "$file could not be linked; a regular file exists at $destination/$file"
        else
            echo "Linking $file"
            ln -fs "$file" "$destination"
        fi
    done
}

# list_dotfile_links:
#   List all dotfiles that are links in a directory
list_dotfile_links() {
    local directory="$1"
    for file in $directory/.*; do
        if [ -L "$file" ]; then
            local link=$(readlink $file)
            if [[ $link == $dotfile_directory* ]]; then
                echo "$file"
            fi
        fi
    done
}

# clean_dotfiles:
#   Remove all linked dotfiles
clean_dotfiles() {
    local links="$(list_dotfile_links $HOME)"
    echo "Removing files: "
    echo "$links"
    rm $links
}

# Setup completions for z
setup_z_completions() {
    local zpath="$(brew --prefix)/etc/profile.d/z.sh"
    if [ -f $zpath ]; then
        source `brew --prefix`/etc/profile.d/z.sh
    fi
}

setup_brew_completions() {
    if [ -f $(brew --prefix)/etc/bash_completion ]; then
        source $(brew --prefix)/etc/bash_completion
    fi
}

# http://thirtysixthspan.com/posts/grep-history-for
# ghf - [G]rep [H]istory [F]or top ten commands and execute one
# usage:
#  Most frequent command in recent history
#   ghf
#  Most frequent instances of {command} in all history
#   ghf {command}
#  Execute {command-number} after a call to ghf
#   !! {command-number}
function latest-history { history | tail -n 50 ; }
function grepped-history { history | grep "$1" ; }
function chop-first-column { awk '{for (i=2; i<NF; i++) printf $i " "; print $NF}' ; }
function add-line-numbers { awk '{print NR " " $0}' ; }
function top-ten { sort | uniq -c | sort -r | head -n 10 ; }
function unique-history { chop-first-column | top-ten | chop-first-column | add-line-numbers ; }
function ghf {
  if [ $# -eq 0 ]; then latest-history | unique-history; fi
  if [ $# -eq 1 ]; then grepped-history "$1" | unique-history; fi
  if [ $# -eq 2 ]; then
    `grepped-history "$1" | unique-history | grep ^$2 | chop-first-column`;
  fi
}

fix_brew_permissions() {
    sudo chown -R $(whoami) $(brew --prefix)/*
}

## Project Aliases
alias indago-shell='ssh -t indago-prod "cd /srv/indago && docker exec -it indago_app_1 bash"'

#
# Setup
#

setup_brew_completions
setup_z_completions
#archey -o
